{"ast":null,"code":"import axios from \"axios\";\nexport const ListModule = {\n  state: () => ({\n    lists: [],\n    selectedSort: '',\n    search: '',\n    page: 0,\n    limit: 10,\n    maxLists: 0,\n    sortOptions: [{\n      value: 'title',\n      name: 'По названию'\n    }, {\n      value: 'body',\n      name: 'По содержимому'\n    }]\n    // или так state: () => ({}) Без return\n  }),\n\n  getters: {\n    sortedLists(state) {\n      return [...state.lists].sort((list1, list2) => list1[state.selectedSort]?.localeCompare(list2[state.selectedSort]));\n    },\n    searchedAndSortLists(state, getters) {\n      return getters.sortedLists.filter(list => list.title.toLowerCase().includes(state.search.toLowerCase()));\n    }\n  },\n  mutations: {\n    setLists(state, lists) {\n      state.lists = lists;\n    },\n    setSort(state, selectedSort) {\n      state.selectedSort = selectedSort;\n    },\n    setPage(state, page) {\n      state.page = page;\n    },\n    setMaxLists(state, maxLists) {\n      state.maxLists = maxLists;\n    },\n    setSearch(state, search) {\n      state.search = search;\n    }\n  },\n  actions: {\n    async fetchLists({\n      state,\n      commit\n    }) {\n      try {\n        commit('setPage', state.page + 1);\n        const response = await axios.get('https://jsonplaceholder.typicode.com/posts', {\n          params: {\n            _page: state.page,\n            _limit: state.limit\n          }\n        });\n        commit('setMaxLists', Math.ceil(response.headers['x-total-count'] / state.limit));\n        commit('setLists', response.data); // удалить state.lists\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  },\n  namespaced: true\n};","map":{"version":3,"names":["axios","ListModule","state","lists","selectedSort","search","page","limit","maxLists","sortOptions","value","name","getters","sortedLists","sort","list1","list2","localeCompare","searchedAndSortLists","filter","list","title","toLowerCase","includes","mutations","setLists","setSort","setPage","setMaxLists","setSearch","actions","fetchLists","commit","response","get","params","_page","_limit","Math","ceil","headers","data","e","console","log","namespaced"],"sources":["C:/Users/bogda/Downloads/Vue_Try/src/store/ListModule.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nexport const ListModule = {\r\n    state: () => ({\r\n        lists: [],\r\n        selectedSort: '',\r\n        search: '',\r\n        page:0,    \r\n        limit:10,\r\n        maxLists:0,\r\n        sortOptions: [\r\n            {value: 'title', name: 'По названию'},\r\n            {value: 'body', name: 'По содержимому'}\r\n        ],                                 \r\n    // или так state: () => ({}) Без return\r\n    }),\r\n    getters: {\r\n        sortedLists(state) {\r\n            return [...state.lists].sort((list1,list2) =>  list1[state.selectedSort]?.localeCompare(list2[state.selectedSort]))\r\n        },\r\n        searchedAndSortLists(state,getters) {\r\n            return getters.sortedLists.filter(list => list.title.toLowerCase().includes(state.search.toLowerCase()))\r\n        },\r\n    },\r\n    mutations: {\r\n        setLists(state,lists) {\r\n            state.lists = lists\r\n        },\r\n        setSort(state,selectedSort) {\r\n            state.selectedSort = selectedSort\r\n        },\r\n        setPage(state,page) {\r\n            state.page = page\r\n        },\r\n        setMaxLists(state,maxLists) {\r\n            state.maxLists = maxLists\r\n        },\r\n        setSearch(state,search) {\r\n            state.search = search\r\n        },\r\n\r\n    },\r\n    actions: {\r\n        async fetchLists({state,commit}) {\r\n\r\n            try {\r\n                commit('setPage', state.page +1)\r\n                const response = await axios.get('https://jsonplaceholder.typicode.com/posts', {\r\n                    params: {\r\n                        _page: state.page,\r\n                        _limit: state.limit,\r\n                    }\r\n                });\r\n                commit('setMaxLists',Math.ceil(response.headers['x-total-count'] / state.limit))\r\n                commit('setLists',response.data) // удалить state.lists\r\n\r\n            }catch (e) {\r\n                console.log(e)\r\n            }\r\n            \r\n        },\r\n    },\r\n    namespaced: true\r\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,UAAU,GAAG;EACtBC,KAAK,EAAEA,CAAA,MAAO;IACVC,KAAK,EAAE,EAAE;IACTC,YAAY,EAAE,EAAE;IAChBC,MAAM,EAAE,EAAE;IACVC,IAAI,EAAC,CAAC;IACNC,KAAK,EAAC,EAAE;IACRC,QAAQ,EAAC,CAAC;IACVC,WAAW,EAAE,CACT;MAACC,KAAK,EAAE,OAAO;MAAEC,IAAI,EAAE;IAAa,CAAC,EACrC;MAACD,KAAK,EAAE,MAAM;MAAEC,IAAI,EAAE;IAAgB,CAAC;IAE/C;EACA,CAAC,CAAC;;EACFC,OAAO,EAAE;IACLC,WAAWA,CAACX,KAAK,EAAE;MACf,OAAO,CAAC,GAAGA,KAAK,CAACC,KAAK,CAAC,CAACW,IAAI,CAAC,CAACC,KAAK,EAACC,KAAK,KAAMD,KAAK,CAACb,KAAK,CAACE,YAAY,CAAC,EAAEa,aAAa,CAACD,KAAK,CAACd,KAAK,CAACE,YAAY,CAAC,CAAC,CAAC;IACvH,CAAC;IACDc,oBAAoBA,CAAChB,KAAK,EAACU,OAAO,EAAE;MAChC,OAAOA,OAAO,CAACC,WAAW,CAACM,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,KAAK,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACrB,KAAK,CAACG,MAAM,CAACiB,WAAW,CAAC,CAAC,CAAC,CAAC;IAC5G;EACJ,CAAC;EACDE,SAAS,EAAE;IACPC,QAAQA,CAACvB,KAAK,EAACC,KAAK,EAAE;MAClBD,KAAK,CAACC,KAAK,GAAGA,KAAK;IACvB,CAAC;IACDuB,OAAOA,CAACxB,KAAK,EAACE,YAAY,EAAE;MACxBF,KAAK,CAACE,YAAY,GAAGA,YAAY;IACrC,CAAC;IACDuB,OAAOA,CAACzB,KAAK,EAACI,IAAI,EAAE;MAChBJ,KAAK,CAACI,IAAI,GAAGA,IAAI;IACrB,CAAC;IACDsB,WAAWA,CAAC1B,KAAK,EAACM,QAAQ,EAAE;MACxBN,KAAK,CAACM,QAAQ,GAAGA,QAAQ;IAC7B,CAAC;IACDqB,SAASA,CAAC3B,KAAK,EAACG,MAAM,EAAE;MACpBH,KAAK,CAACG,MAAM,GAAGA,MAAM;IACzB;EAEJ,CAAC;EACDyB,OAAO,EAAE;IACL,MAAMC,UAAUA,CAAC;MAAC7B,KAAK;MAAC8B;IAAM,CAAC,EAAE;MAE7B,IAAI;QACAA,MAAM,CAAC,SAAS,EAAE9B,KAAK,CAACI,IAAI,GAAE,CAAC,CAAC;QAChC,MAAM2B,QAAQ,GAAG,MAAMjC,KAAK,CAACkC,GAAG,CAAC,4CAA4C,EAAE;UAC3EC,MAAM,EAAE;YACJC,KAAK,EAAElC,KAAK,CAACI,IAAI;YACjB+B,MAAM,EAAEnC,KAAK,CAACK;UAClB;QACJ,CAAC,CAAC;QACFyB,MAAM,CAAC,aAAa,EAACM,IAAI,CAACC,IAAI,CAACN,QAAQ,CAACO,OAAO,CAAC,eAAe,CAAC,GAAGtC,KAAK,CAACK,KAAK,CAAC,CAAC;QAChFyB,MAAM,CAAC,UAAU,EAACC,QAAQ,CAACQ,IAAI,CAAC,EAAC;MAErC,CAAC,QAAOC,CAAC,EAAE;QACPC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;MAClB;IAEJ;EACJ,CAAC;EACDG,UAAU,EAAE;AAChB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}