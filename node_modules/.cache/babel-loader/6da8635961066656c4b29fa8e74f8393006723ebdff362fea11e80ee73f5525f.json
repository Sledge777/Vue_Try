{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = [\"value\"];\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"option\", {\n  disabled: \"\",\n  value: \"\"\n}, \"Выберите список\", -1 /* HOISTED */);\nconst _hoisted_3 = [\"value\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"select\", {\n    value: $props.modelValue,\n    onChange: _cache[0] || (_cache[0] = (...args) => $options.changeOption && $options.changeOption(...args))\n  }, [_hoisted_2, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.options, option => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      value: option.value,\n      key: option.value\n    }, _toDisplayString(option.name), 9 /* TEXT, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))], 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_1);\n}","map":{"version":3,"names":["_createElementVNode","disabled","value","_createElementBlock","$props","modelValue","onChange","_cache","args","$options","changeOption","_hoisted_2","_Fragment","_renderList","options","option","key","name","_hoisted_3"],"sources":["C:\\Users\\bogda\\Downloads\\Vue_Try\\src\\components\\UI\\select.vue"],"sourcesContent":["<template>\r\n    <select :value=\"modelValue\" @change=\"changeOption\">\r\n        <option disabled value=\"\">Выберите список</option>\r\n        <option \r\n            v-for=\"option in options\"\r\n            :value=\"option.value\"\r\n            :key=\"option.value\"\r\n        >\r\n            {{ option.name }}\r\n        </option>\r\n    </select>\r\n</template>\r\n<script>\r\n\r\nexport default {\r\n    name: 'my-select',\r\n    props: {\r\n        modelValue: {\r\n            type: String,\r\n        },\r\n        options: {\r\n            type: Array,\r\n            default: () => [],\r\n        }\r\n    },\r\n    methods: {\r\n        changeOption(event) {\r\n            this.$emit('update:modelValue',event.target.value)\r\n        }\r\n    }\r\n}\r\n</script>\r\n<style scoped>\r\n    \r\n</style>"],"mappings":";;gCAEQA,mBAAA,CAAkD;EAA1CC,QAAQ,EAAR,EAAQ;EAACC,KAAK,EAAC;GAAG,iBAAe;;;uBAD7CC,mBAAA,CASS;IATAD,KAAK,EAAEE,MAAA,CAAAC,UAAU;IAAGC,QAAM,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,YAAA,IAAAD,QAAA,CAAAC,YAAA,IAAAF,IAAA,CAAY;MAC7CG,UAAkD,G,kBAClDR,mBAAA,CAMSS,SAAA,QAAAC,WAAA,CALYT,MAAA,CAAAU,OAAO,EAAjBC,MAAM;yBADjBZ,mBAAA,CAMS;MAJJD,KAAK,EAAEa,MAAM,CAACb,KAAK;MACnBc,GAAG,EAAED,MAAM,CAACb;wBAEVa,MAAM,CAACE,IAAI,wBAAAC,UAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}