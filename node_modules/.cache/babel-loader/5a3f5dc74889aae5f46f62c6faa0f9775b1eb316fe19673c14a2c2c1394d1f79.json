{"ast":null,"code":"import axios from \"axios\";\nexport const ListModule = {\n  state: () => ({\n    lists: [],\n    selectedSort: '',\n    search: '',\n    page: 0,\n    limit: 10,\n    maxLists: 0,\n    sortOptions: [{\n      value: 'title',\n      name: 'По названию'\n    }, {\n      value: 'body',\n      name: 'По содержимому'\n    }]\n    // или так state: () => ({}) Без return\n  }),\n\n  getters: {\n    sortedLists(state) {\n      return [...state.lists].sort((list1, list2) => list1[state.selectedSort]?.localeCompare(list2[state.selectedSort]));\n    },\n    searchedAndSortLists(state, getters) {\n      return getters.sortedLists.filter(list => list.title.toLowerCase().includes(state.search.toLowerCase()));\n    }\n  },\n  mutations: {\n    setLists(state, el) {\n      state.lists = el;\n    },\n    setSort(state, el) {\n      state.selectedSort = el;\n    },\n    setPage(state, el) {\n      state.page = el;\n    },\n    setMaxLists(state, el) {\n      state.maxLists = el;\n    },\n    setSearch(state, el) {\n      state.search = el;\n    }\n  },\n  actions: {\n    async fetchPosts({\n      state,\n      commit\n    }) {\n      try {\n        commit('setLoading', true);\n        const response = await axios.get('https://jsonplaceholder.typicode.com/posts', {\n          params: {\n            _page: state.page,\n            _limit: state.limit\n          }\n        });\n        commit('setTotalPages', Math.ceil(response.headers['x-total-count'] / state.limit));\n        commit('setPosts', response.data);\n      } catch (e) {\n        console.log(e);\n      } finally {\n        commit('setLoading', false);\n      }\n    },\n    async loadMorePosts({\n      state,\n      commit\n    }) {\n      try {\n        commit('setPage', state.page + 1);\n        const response = await axios.get('https://jsonplaceholder.typicode.com/posts', {\n          params: {\n            _page: state.page,\n            _limit: state.limit\n          }\n        });\n        commit('setTotalPages', Math.ceil(response.headers['x-total-count'] / state.limit));\n        commit('setPosts', [...state.posts, ...response.data]);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  },\n  namespaced: true\n};","map":{"version":3,"names":["axios","ListModule","state","lists","selectedSort","search","page","limit","maxLists","sortOptions","value","name","getters","sortedLists","sort","list1","list2","localeCompare","searchedAndSortLists","filter","list","title","toLowerCase","includes","mutations","setLists","el","setSort","setPage","setMaxLists","setSearch","actions","fetchPosts","commit","response","get","params","_page","_limit","Math","ceil","headers","data","e","console","log","loadMorePosts","posts","namespaced"],"sources":["C:/Users/bogda/Downloads/Vue_Try/src/store/ListModule.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nexport const ListModule = {\r\n    state: () => ({\r\n        lists: [],\r\n        selectedSort: '',\r\n        search: '',\r\n        page:0,    \r\n        limit:10,\r\n        maxLists:0,\r\n        sortOptions: [\r\n            {value: 'title', name: 'По названию'},\r\n            {value: 'body', name: 'По содержимому'}\r\n        ],                                 \r\n    // или так state: () => ({}) Без return\r\n    }),\r\n    getters: {\r\n        sortedLists(state) {\r\n            return [...state.lists].sort((list1,list2) =>  list1[state.selectedSort]?.localeCompare(list2[state.selectedSort]))\r\n        },\r\n        searchedAndSortLists(state,getters) {\r\n            return getters.sortedLists.filter(list => list.title.toLowerCase().includes(state.search.toLowerCase()))\r\n        },\r\n    },\r\n    mutations: {\r\n        setLists(state,el) {\r\n            state.lists = el\r\n        },\r\n        setSort(state,el) {\r\n            state.selectedSort = el\r\n        },\r\n        setPage(state,el) {\r\n            state.page = el\r\n        },\r\n        setMaxLists(state,el) {\r\n            state.maxLists = el\r\n        },\r\n        setSearch(state,el) {\r\n            state.search = el\r\n        },\r\n\r\n    },\r\n    actions: {\r\n        async fetchPosts({state, commit}) {\r\n            try {\r\n                commit('setLoading', true);\r\n                const response = await axios.get('https://jsonplaceholder.typicode.com/posts', {\r\n                    params: {\r\n                        _page: state.page,\r\n                        _limit: state.limit\r\n                    }\r\n                });\r\n                commit('setTotalPages', Math.ceil(response.headers['x-total-count'] / state.limit))\r\n                commit('setPosts', response.data)\r\n            } catch (e) {\r\n                console.log(e)\r\n            } finally {\r\n                commit('setLoading', false);\r\n            }\r\n        },\r\n        async loadMorePosts({state, commit}) {\r\n            try {\r\n                commit('setPage', state.page + 1)\r\n                const response = await axios.get('https://jsonplaceholder.typicode.com/posts', {\r\n                    params: {\r\n                        _page: state.page,\r\n                        _limit: state.limit\r\n                    }\r\n                });\r\n                commit('setTotalPages', Math.ceil(response.headers['x-total-count'] / state.limit))\r\n                commit('setPosts', [...state.posts, ...response.data]);\r\n            } catch (e) {\r\n                console.log(e)\r\n            }\r\n        }\r\n    },\r\n    namespaced: true\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}