{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"option\", {\n  disabled: \"\",\n  value: \"\"\n}, \"Выберите список\", -1 /* HOISTED */);\nconst _hoisted_2 = [\"value\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _withDirectives((_openBlock(), _createElementBlock(\"select\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.mo = $event),\n    onChange: _cache[1] || (_cache[1] = (...args) => $options.changeOption && $options.changeOption(...args))\n  }, [_hoisted_1, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.options, option => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      value: option.value,\n      key: option.value\n    }, _toDisplayString(option.name), 9 /* TEXT, PROPS */, _hoisted_2);\n  }), 128 /* KEYED_FRAGMENT */))], 544 /* HYDRATE_EVENTS, NEED_PATCH */)), [[_vModelSelect, _ctx.mo]]);\n}","map":{"version":3,"names":["_createElementVNode","disabled","value","_createElementBlock","_ctx","mo","$event","onChange","_cache","args","$options","changeOption","_hoisted_1","_Fragment","_renderList","$props","options","option","key","name","_hoisted_2"],"sources":["/run/media/sledge/Base/programs/Vue_Try/src/components/UI/select.vue"],"sourcesContent":["<template>\n    <select v-model=\"mo\" @change=\"changeOption\">\n        <option disabled value=\"\">Выберите список</option>\n        <option \n            v-for=\"option in options\"\n            :value=\"option.value\"\n            :key=\"option.value\"\n        >\n            {{ option.name }}\n        </option>\n    </select>\n</template>\n<script>\n\nexport default {\n    name: 'my-select',\n    props: {\n        modelValue: {\n            type: String,\n        },\n        options: {\n            type: Array,\n            default: () => [],\n        }\n    },\n    methods: {\n        changeOption(event) {\n            this.$emit('update:modelValue',option)\n        }\n    }\n}\n</script>\n<style scoped>\n    \n</style>"],"mappings":";gCAEQA,mBAAA,CAAkD;EAA1CC,QAAQ,EAAR,EAAQ;EAACC,KAAK,EAAC;GAAG,iBAAe;;;wCAD7CC,mBAAA,CASS;+DATQC,IAAA,CAAAC,EAAE,GAAAC,MAAA;IAAGC,QAAM,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,YAAA,IAAAD,QAAA,CAAAC,YAAA,IAAAF,IAAA,CAAY;MACtCG,UAAkD,G,kBAClDT,mBAAA,CAMSU,SAAA,QAAAC,WAAA,CALYC,MAAA,CAAAC,OAAO,EAAjBC,MAAM;yBADjBd,mBAAA,CAMS;MAJJD,KAAK,EAAEe,MAAM,CAACf,KAAK;MACnBgB,GAAG,EAAED,MAAM,CAACf;wBAEVe,MAAM,CAACE,IAAI,wBAAAC,UAAA;4FAPLhB,IAAA,CAAAC,EAAE,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}