{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport PostList from \"@/components/PostList\";\nimport PostForm from \"@/components/PostForm\";\nimport axios from \"axios\";\nexport default {\n  components: {\n    PostList,\n    PostForm\n  },\n  data() {\n    return {\n      lists: [],\n      dialogVisible: false,\n      selectedSort: '',\n      page: 0,\n      limit: 10,\n      maxLists: 0,\n      sortOptions: [{\n        value: 'title',\n        name: 'По названию'\n      }, {\n        value: 'body',\n        name: 'По содержимому'\n      }],\n      search: ''\n    };\n  },\n  methods: {\n    add(newList) {\n      this.lists.push(newList);\n    },\n    remove(list) {\n      this.lists = this.lists.filter(l => l.id !== list.id);\n    },\n    showDialog() {\n      this.dialogVisible = true;\n    },\n    async fetchLists() {\n      try {\n        this.page += 1;\n        const response = await axios.get('https://jsonplaceholder.typicode.com/posts', {\n          params: {\n            _page: this.page,\n            _limit: this.limit\n          }\n        });\n        this.maxLists = Math.ceil(response.headers['x-total-count'] / this.limit);\n        this.lists = [...this.lists, ...response.data];\n      } catch {\n        alert('пизда');\n      }\n    },\n    changePage(pageNum) {\n      this.page = pageNum;\n      this.fetchLists();\n    }\n  },\n  mounted() {\n    this.fetchLists();\n  },\n  computed: {\n    sortedLists() {\n      return [...this.lists].sort((list1, list2) => list1[this.selectedSort]?.localeCompare(list2[this.selectedSort]));\n    },\n    searchedAndSortLists() {\n      return this.sortedLists.filter(list => list.title.toLowerCase().includes(this.search.toLowerCase()));\n    }\n  },\n  watch: {\n    // page() {\n    //    this.fetchLists\n    // } \n  }\n};","map":{"version":3,"names":["PostList","PostForm","axios","components","data","lists","dialogVisible","selectedSort","page","limit","maxLists","sortOptions","value","name","search","methods","add","newList","push","remove","list","filter","l","id","showDialog","fetchLists","response","get","params","_page","_limit","Math","ceil","headers","alert","changePage","pageNum","mounted","computed","sortedLists","sort","list1","list2","localeCompare","searchedAndSortLists","title","toLowerCase","includes","watch"],"sources":["C:\\Users\\bogda\\Downloads\\Vue_Try\\src\\pages\\ListsWithComposition.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <my-input\r\n        v-model=\"search\"\r\n        placeholder=\"Поиск\"\r\n        v-focus\r\n        >\r\n        </my-input>\r\n\r\n        <div class=\"buttons\">\r\n            <first-Button\r\n            @click=\"showDialog\"\r\n            style=\"margin-top: 10px;\"\r\n            >Создать пост</first-Button>\r\n            <my-select \r\n            v-model=\"selectedSort\"\r\n            :options=\"sortOptions\"\r\n            >\r\n\r\n            </my-select>\r\n        </div>\r\n        <my-dialog v-model:show=\"dialogVisible\">\r\n            <post-form \r\n                @getPost=\"add\"\r\n            />\r\n        </my-dialog>\r\n        <post-list :lists=\"searchedAndSortLists\" @remove=\"remove\"/>\r\n        <div class=\"wrapper_page\">\r\n            <div \r\n            class=\"page\" \r\n            v-for=\"pageNum in maxLists\" \r\n            :key=\"pageNum\"\r\n            :class=\"{\r\n                'selected_page': this.page === pageNum\r\n            }\"\r\n            @click=\"changePage(pageNum)\"\r\n            >{{ pageNum }}</div>\r\n        </div>\r\n        <div v-intersection=\"fetchLists\" class=\"observe\"></div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport PostList from \"@/components/PostList\";\r\nimport PostForm from \"@/components/PostForm\";\r\nimport axios from \"axios\"\r\n\r\nexport default {\r\n    components: {\r\n        PostList, PostForm,\r\n    },\r\n    data() {\r\n        return {\r\n            lists: [],\r\n            dialogVisible: false,\r\n            selectedSort: '',\r\n            page:0,\r\n            limit:10,\r\n            maxLists:0,\r\n            sortOptions: [\r\n                {value: 'title', name: 'По названию'},\r\n                {value: 'body', name: 'По содержимому'}\r\n            ],\r\n            search: '',\r\n        }\r\n    },\r\n    methods: {\r\n        add(newList) {\r\n            this.lists.push(newList);\r\n        },\r\n        remove(list) {\r\n            this.lists = this.lists.filter(l => l.id !== list.id);\r\n        },\r\n        showDialog() {\r\n            this.dialogVisible = true;\r\n        },\r\n        async fetchLists() {\r\n\r\n            try {\r\n                this.page += 1;\r\n                const response = await axios.get('https://jsonplaceholder.typicode.com/posts', {\r\n                    params: {\r\n                        _page: this.page,\r\n                        _limit: this.limit,\r\n                    }\r\n                });\r\n                this.maxLists = Math.ceil(response.headers['x-total-count'] / this.limit)\r\n                this.lists = [...this.lists, ...response.data]\r\n\r\n            }catch {\r\n                alert('пизда')\r\n            }\r\n            \r\n        },\r\n        changePage(pageNum) {\r\n            this.page = pageNum\r\n            this.fetchLists()\r\n        }\r\n    },\r\n    mounted() {\r\n        this.fetchLists();\r\n    },\r\n    computed: {\r\n        sortedLists() {\r\n            return [...this.lists].sort((list1,list2) =>  list1[this.selectedSort]?.localeCompare(list2[this.selectedSort]))\r\n        },\r\n        searchedAndSortLists() {\r\n            return this.sortedLists.filter(list => list.title.toLowerCase().includes(this.search.toLowerCase()))\r\n        },\r\n        \r\n    },\r\n    watch: {\r\n        // page() {\r\n        //    this.fetchLists\r\n        // } \r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nbody {\r\n    padding: 20px;\r\n}\r\n.buttons {\r\n    display: flex;\r\n    justify-content: space-between;\r\n}\r\n.wrapper_page {\r\n    display: flex;\r\n    margin-top: 20px;\r\n}\r\n.page {\r\n    border:1px solid black ;\r\n    padding: 10px;\r\n}\r\n.selected_page {\r\n    border:2px solid green;\r\n}\r\n.observe {\r\n    height: 30px;\r\n}\r\n</style>"],"mappings":";AA0CA,OAAOA,QAAO,MAAO,uBAAuB;AAC5C,OAAOC,QAAO,MAAO,uBAAuB;AAC5C,OAAOC,KAAI,MAAO,OAAM;AAExB,eAAe;EACXC,UAAU,EAAE;IACRH,QAAQ;IAAEC;EACd,CAAC;EACDG,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,KAAK,EAAE,EAAE;MACTC,aAAa,EAAE,KAAK;MACpBC,YAAY,EAAE,EAAE;MAChBC,IAAI,EAAC,CAAC;MACNC,KAAK,EAAC,EAAE;MACRC,QAAQ,EAAC,CAAC;MACVC,WAAW,EAAE,CACT;QAACC,KAAK,EAAE,OAAO;QAAEC,IAAI,EAAE;MAAa,CAAC,EACrC;QAACD,KAAK,EAAE,MAAM;QAAEC,IAAI,EAAE;MAAgB,EACzC;MACDC,MAAM,EAAE;IACZ;EACJ,CAAC;EACDC,OAAO,EAAE;IACLC,GAAGA,CAACC,OAAO,EAAE;MACT,IAAI,CAACZ,KAAK,CAACa,IAAI,CAACD,OAAO,CAAC;IAC5B,CAAC;IACDE,MAAMA,CAACC,IAAI,EAAE;MACT,IAAI,CAACf,KAAI,GAAI,IAAI,CAACA,KAAK,CAACgB,MAAM,CAACC,CAAA,IAAKA,CAAC,CAACC,EAAC,KAAMH,IAAI,CAACG,EAAE,CAAC;IACzD,CAAC;IACDC,UAAUA,CAAA,EAAG;MACT,IAAI,CAAClB,aAAY,GAAI,IAAI;IAC7B,CAAC;IACD,MAAMmB,UAAUA,CAAA,EAAG;MAEf,IAAI;QACA,IAAI,CAACjB,IAAG,IAAK,CAAC;QACd,MAAMkB,QAAO,GAAI,MAAMxB,KAAK,CAACyB,GAAG,CAAC,4CAA4C,EAAE;UAC3EC,MAAM,EAAE;YACJC,KAAK,EAAE,IAAI,CAACrB,IAAI;YAChBsB,MAAM,EAAE,IAAI,CAACrB;UACjB;QACJ,CAAC,CAAC;QACF,IAAI,CAACC,QAAO,GAAIqB,IAAI,CAACC,IAAI,CAACN,QAAQ,CAACO,OAAO,CAAC,eAAe,IAAI,IAAI,CAACxB,KAAK;QACxE,IAAI,CAACJ,KAAI,GAAI,CAAC,GAAG,IAAI,CAACA,KAAK,EAAE,GAAGqB,QAAQ,CAACtB,IAAI;MAEjD,CAAC,OAAM;QACH8B,KAAK,CAAC,OAAO;MACjB;IAEJ,CAAC;IACDC,UAAUA,CAACC,OAAO,EAAE;MAChB,IAAI,CAAC5B,IAAG,GAAI4B,OAAM;MAClB,IAAI,CAACX,UAAU,CAAC;IACpB;EACJ,CAAC;EACDY,OAAOA,CAAA,EAAG;IACN,IAAI,CAACZ,UAAU,CAAC,CAAC;EACrB,CAAC;EACDa,QAAQ,EAAE;IACNC,WAAWA,CAAA,EAAG;MACV,OAAO,CAAC,GAAG,IAAI,CAAClC,KAAK,CAAC,CAACmC,IAAI,CAAC,CAACC,KAAK,EAACC,KAAK,KAAMD,KAAK,CAAC,IAAI,CAAClC,YAAY,CAAC,EAAEoC,aAAa,CAACD,KAAK,CAAC,IAAI,CAACnC,YAAY,CAAC,CAAC;IACnH,CAAC;IACDqC,oBAAoBA,CAAA,EAAG;MACnB,OAAO,IAAI,CAACL,WAAW,CAAClB,MAAM,CAACD,IAAG,IAAKA,IAAI,CAACyB,KAAK,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,IAAI,CAACjC,MAAM,CAACgC,WAAW,CAAC,CAAC,CAAC;IACvG;EAEJ,CAAC;EACDE,KAAK,EAAE;IACH;IACA;IACA;EAAA;AAER"},"metadata":{},"sourceType":"module","externalDependencies":[]}